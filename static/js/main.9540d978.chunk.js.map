{"version":3,"sources":["hooks/useToggle.ts","App.tsx","index.tsx"],"names":["useToggle","initialState","useState","state","setState","toggle","useCallback","App","isTextChanged","setIsTextChanged","onClick","rootElement","document","getElementById","render"],"mappings":"2JAeeA,G,KAXG,WAAoD,IAAnDC,EAAkD,wDAEnE,EAA0BC,mBAAkBD,GAA5C,mBAAOE,EAAP,KAAcC,EAAd,KAIMC,EAASC,uBAAY,kBAAYF,GAAS,SAACD,GAAD,OAAYA,OAAQ,IAEpE,MAAO,CAACA,EAAOE,KCIFE,MAXf,WAEE,MAA0CP,IAA1C,mBAAOQ,EAAP,KAAsBC,EAAtB,KAEA,OACE,0BAAQC,QAASD,GACdD,EAAgB,UAAY,oBCL7BG,EAAcC,SAASC,eAAe,QAC5CC,iBAAO,gBAAC,EAAD,MAASH,I","file":"static/js/main.9540d978.chunk.js","sourcesContent":["import { useState, useCallback } from \"react\";\r\n\r\n// Hook\r\n// Parameter is the boolean, with default \"false\" value\r\nconst useToggle = (initialState: boolean = false): [boolean, any] => {\r\n  // Initialize the state\r\n  const [state, setState] = useState<boolean>(initialState);\r\n\r\n  // Define and memorize toggler function in case we pass down the comopnent,\r\n  // This function change the boolean value to it's opposite value\r\n  const toggle = useCallback((): void => setState((state) => !state), []);\r\n\r\n  return [state, toggle];\r\n};\r\n\r\nexport default useToggle;\r\n","import * as React from \"react\";\nimport \"./styles.css\";\nimport useToggle from \"./hooks/useToggle\";\n\n// Usage\nfunction App() {\n  // Call the hook which returns, current value and the toggler function\n  const [isTextChanged, setIsTextChanged] = useToggle();\n\n  return (\n    <button onClick={setIsTextChanged}>\n      {isTextChanged ? \"Toggled\" : \"Click to Toggle\"}\n    </button>\n  );\n}\n\nexport default App;\n","import * as React from \"react\";\nimport { render } from \"react-dom\";\n\nimport App from \"./App\";\nimport Test from \"./Test\";\n\nconst rootElement = document.getElementById(\"root\");\nrender(<App />, rootElement);\n//render(<Test />, rootElement);\n"],"sourceRoot":""}